name: happy
version: 1.20.0
license: BSD2
license-file: LICENSE
copyright: (c) Andy Gill, Simon Marlow
author: Andy Gill and Simon Marlow
maintainer: Simon Marlow <marlowsd@gmail.com>
bug-reports: https://github.com/simonmar/happy/issues
stability: stable
homepage: https://www.haskell.org/happy/
synopsis: Happy is a parser generator for Haskell
category: Development
cabal-version: >= 1.10
build-type: Simple

Description:
  Happy is a parser generator for Haskell.  Given a grammar
  specification in BNF, Happy generates Haskell code to parse the
  grammar.  Happy works in a similar way to the @yacc@ tool for C.

tested-with:
  GHC==7.10.3,
  GHC==8.0.2,
  GHC==8.2.2,
  GHC==8.4.4,
  GHC==8.6.5,
  GHC==8.8.1

data-dir: data/

data-files:
        HappyTemplate
        HappyTemplate-arrays
        HappyTemplate-arrays-coerce
        HappyTemplate-arrays-coerce-debug
        HappyTemplate-arrays-debug
        HappyTemplate-arrays-ghc
        HappyTemplate-arrays-ghc-debug
        HappyTemplate-coerce
        HappyTemplate-ghc
        GLR_Base
        GLR_Lib
        GLR_Lib-ghc
        GLR_Lib-ghc-debug

extra-source-files:
        ANNOUNCE
        CHANGES
        Makefile
        README.md
        TODO
        doc/Makefile
        doc/aclocal.m4
        doc/config.mk.in
        doc/configure.ac
        doc/docbook-xml.mk
        doc/fptools.css
        doc/happy.1.in
        doc/happy.xml
        examples/glr/nlp/Main.lhs
        examples/glr/nlp/Makefile
        examples/glr/nlp/README
        examples/glr/nlp/English.y
        examples/glr/nlp/Hugs.lhs
        examples/glr/Makefile
        examples/glr/Makefile.defs
        examples/glr/expr-eval/Main.lhs
        examples/glr/expr-eval/Makefile
        examples/glr/expr-eval/Expr.y
        examples/glr/expr-eval/README
        examples/glr/expr-eval/Hugs.lhs
        examples/glr/expr-tree/Main.lhs
        examples/glr/expr-tree/Makefile
        examples/glr/expr-tree/Expr.y
        examples/glr/expr-tree/README
        examples/glr/expr-tree/Tree.lhs
        examples/glr/expr-tree/Hugs.lhs
        examples/glr/highly-ambiguous/Main.lhs
        examples/glr/highly-ambiguous/Makefile
        examples/glr/highly-ambiguous/Expr.y
        examples/glr/highly-ambiguous/README
        examples/glr/highly-ambiguous/Hugs.lhs
        examples/glr/hidden-leftrec/Main.lhs
        examples/glr/hidden-leftrec/Makefile
        examples/glr/hidden-leftrec/Expr.y
        examples/glr/hidden-leftrec/README
        examples/glr/hidden-leftrec/Hugs.lhs
        examples/glr/expr-monad/Main.lhs
        examples/glr/expr-monad/Makefile
        examples/glr/expr-monad/Expr.y
        examples/glr/expr-monad/README
        examples/glr/expr-monad/Hugs.lhs
        examples/glr/bio-eg/Main.lhs
        examples/glr/bio-eg/Makefile
        examples/glr/bio-eg/Bio.y
        examples/glr/bio-eg/README
        examples/glr/bio-eg/1-1200.dna
        examples/glr/bio-eg/1-600.dna
        examples/glr/common/DV_lhs
        examples/glr/common/DaVinciTypes.hs
        examples/glr/packing/Main.lhs
        examples/glr/packing/Makefile
        examples/glr/packing/Expr.y
        examples/glr/packing/README
        examples/glr/packing/Hugs.lhs
        examples/PgnParser.ly
        examples/MonadTest.ly
        examples/igloo/ParserM.hs
        examples/igloo/Makefile
        examples/igloo/Parser.y
        examples/igloo/Foo.hs
        examples/igloo/README
        examples/igloo/Lexer.x
        examples/README
        examples/Calc.ly
        examples/DavesExample.ly
        examples/ErrorTest.ly
        examples/ErlParser.ly
        examples/SimonsExample.ly
        examples/LexerTest.ly
        happy.spec
        src/ARRAY-NOTES
        tests/AttrGrammar001.y
        tests/AttrGrammar002.y
        tests/Makefile
        tests/Partial.ly
        tests/Test.ly
        tests/TestMulti.ly
        tests/TestPrecedence.ly
        tests/bogus-token.y
        tests/bug001.ly
        tests/bug002.y
        tests/error001.stderr
        tests/error001.stdout
        tests/error001.y
        tests/monad001.y
        tests/monad002.ly
        tests/monaderror.y
        tests/precedence001.ly
        tests/precedence002.y
        tests/test_rules.y
        tests/issue91.y
        tests/issue93.y
        tests/issue94.y
        tests/issue95.y
        tests/monaderror-explist.y
        tests/typeclass_monad001.y
        tests/typeclass_monad002.ly
        tests/typeclass_monad_lexer.y
        tests/rank2.y
        tests/shift01.y

source-repository head
  type:     git
  location: https://github.com/simonmar/happy.git

executable happy
  hs-source-dirs: src
  main-is: Main.lhs

  build-depends: base < 5,
                 array,
                 containers >= 0.4.2,
                 mtl >= 2.2.1
                     -- mtl-2.2.1 added Control.Monad.Except

  default-language: Haskell98
  default-extensions: CPP, MagicHash, FlexibleContexts
  ghc-options: -Wall
  other-modules:
        Paths_happy
        AbsSyn
        First
        GenUtils
        Grammar
        Info
        LALR
        Lexer
        ParseMonad
        Parser
        ProduceCode
        ProduceGLRCode
        NameSet
        Target
        AttrGrammar
        AttrGrammarParser
        ParamRules
        PrettyGrammar

test-suite tests
  type: exitcode-stdio-1.0
  main-is: test.hs
  -- This line is important as it ensures that the local `exe:happy` component declared above is built before the test-suite component is invoked, as well as making sure that `happy` is made available on $PATH and `$happy_datadir` is set accordingly before invoking `test.hs`
  build-tools: happy

  build-depends: base, process
  default-language: Haskell98

